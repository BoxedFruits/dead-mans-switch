{"version":3,"sources":["components/contractInteraction.jsx","components/contractSetup.jsx","components/smartContract.jsx","App.js","reportWebVitals.js","index.js"],"names":["antIcon","LoadingOutlined","style","fontSize","width","spin","Text","Typography","Paragraph","ContractInteraction","initContract","undefined","state","contract","signer","ethers","providers","Web3Provider","ethereum","getSigner","Contract","props","address","DeadMansContract","abi","setState","isActive","a","tx","pendingTx","active","setTimeout","tick","wait","getNextTimeStamp","console","log","nextTimeStamp","Date","parseInt","BigInt","toString","setUrl","newUrl","document","getElementById","value","getUrl","url","getDecryptionKey","showDecryptionKeyText","decryptionKey","renounceOwnershipModal","isModalRenounceVisible","renounceOwnership","handleRenounceCancel","defuse","handleDefuseCancel","defuseModal","isModalDefuseVisible","showTickText","showGetDecryptionText","this","plain","underline","indicator","marginTop","direction","title","onClick","size","id","visible","footer","React","Component","Title","Panel","Collapse","ContractSetup","useState","currentAccount","setCurrentAccount","isLoading","setIsLoading","contractExists","setContractExists","contractAddress","setContractAddress","connectWallet","window","alert","request","method","accounts","createContract","provider","cadence","factory","ContractFactory","bytecode","deploy","deployTransaction","then","level","marginBottom","href","target","className","placeholder","_contractAddress","max","header","ContractCode","text","language","showLineNumber","theme","dracula","Header","Layout","Content","Footer","App","position","zIndex","mode","Item","to","justify","span","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.73df662d.chunk.js","sourcesContent":["import { Modal, Button, Space, Input, Spin, Typography, Divider, Tooltip } from 'antd';\r\nimport React from 'react';\r\nimport DeadMansContract from '../utils/DeadMansContract.abi.json';\r\nimport { ethers } from \"ethers\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 92, width: 100 }} spin />;\r\nconst { Text, Paragraph } = Typography;\r\n\r\nclass ContractInteraction extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            active: false,\r\n            url: \"\",\r\n            decryptionKey: \"\",\r\n            nextTimeStamp: \"\",\r\n            pendingTx: false,\r\n            showTickText: false,\r\n            showGetDecryptionText: false,\r\n            isModalRenounceVisible: false,\r\n            isModalDefuseVisible: false\r\n        };\r\n    }\r\n\r\n    initContract = () => {\r\n        if (this.state.contract == undefined) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const contract = new ethers.Contract(this.props.address, DeadMansContract.abi, signer);\r\n            this.setState({ contract: contract });\r\n            return contract;\r\n        } else {\r\n            return this.state.contract;\r\n        }\r\n    }\r\n\r\n    isActive = async () => {\r\n        try {\r\n            const tx = await this.initContract().isActive();\r\n\r\n            this.setState({ pendingTx: false, active: tx });\r\n        } catch (e) {\r\n            setTimeout(() => {\r\n                // For some reason when this compontent init's this function doesn't properly execute when initing the contract. This is a temp fix\r\n                this.isActive();\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    tick = async () => {\r\n        try {\r\n            const tx = await this.initContract().tick();\r\n\r\n            this.setState({ pendingTx: true });\r\n\r\n            await tx.wait();\r\n            this.setState({ pendingTx: false })\r\n            this.getNextTimeStamp();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    getNextTimeStamp = async () => {\r\n        try {\r\n            const tx = await this.initContract().getNextTimeStamp();\r\n            this.setState({ pendingTx: false, nextTimeStamp: Date(parseInt(BigInt(tx))).toString() });\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    setUrl = async () => {\r\n        try {\r\n            const newUrl = document.getElementById(\"setUrl\").value;\r\n            const tx = await this.initContract().setUrl(newUrl);\r\n\r\n            this.setState({ pendingTx: true });\r\n            await tx.wait();\r\n            this.setState({ pendingTx: false });\r\n            this.getUrl();\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    getUrl = async () => {\r\n        try {\r\n            const tx = await this.initContract().getUrl();\r\n            this.setState({ pendingTx: true });\r\n\r\n            this.setState({ pendingTx: false, url: tx });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    };\r\n\r\n    getDecryptionKey = async () => {\r\n        try {\r\n            const tx = await this.initContract().getDecryptionKey();\r\n\r\n            await tx.wait();\r\n            this.setState({ showDecryptionKeyText: true, decryptionKey: tx });\r\n        } catch (e) {\r\n            this.setState({ showDecryptionKeyText: true, decryptionKey: \"The switch has not been activated yet\" });\r\n        }\r\n    };\r\n\r\n    renounceOwnershipModal = () => {\r\n        this.setState({ isModalRenounceVisible: true });\r\n    }\r\n\r\n    renounceOwnership = async () => {\r\n        const tx = await this.initContract().renounceOwnership();\r\n\r\n        await tx.wait();\r\n        this.handleRenounceCancel();\r\n    };\r\n\r\n    handleRenounceCancel = () => {\r\n        this.setState({ isModalRenounceVisible: false });\r\n    };\r\n\r\n    defuse = async () => {\r\n        const tx = await this.initContract().defuse();\r\n\r\n        await tx.wait();\r\n        this.getNextTimeStamp();\r\n        this.isActive();\r\n        this.handleDefuseCancel();\r\n    };\r\n\r\n    defuseModal = () => {\r\n        this.setState({ isModalDefuseVisible: true });\r\n    }\r\n\r\n    handleDefuseCancel = () => {\r\n        this.setState({ isModalDefuseVisible: false });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            await this.isActive();\r\n            await this.getUrl();\r\n            await this.getNextTimeStamp();\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // Add error message if user denies transactions\r\n        return (\r\n            <div>\r\n                {/* Give more emphasis to this */}\r\n                <Divider plain>Interact with Smart Contract</Divider>\r\n                <Paragraph>Contract Address: <Text underline>{this.props.address}</Text></Paragraph>\r\n                {this.state.pendingTx ? <Spin indicator={antIcon} style={{ width: \"100%\", marginTop: \"4rem\" }} /> : (\r\n                    <Space direction=\"vertical\">\r\n\r\n                        <Paragraph>Status of switch: <Text underline>{this.state.active === true ? \"still \" : \"not \"} being monitored. </Text></Paragraph>\r\n                        <Paragraph>Next timestamp: <Text underline>{this.state.nextTimeStamp}</Text></Paragraph>\r\n                        <Paragraph>URL to file: <Text underline>{this.state.url === \"\" ? \"There was no URL set or was left blank\" : this.state.url}</Text></Paragraph>\r\n\r\n                        <Tooltip title=\"Update the switch by updating the next timestamp of when the switch should activate\">\r\n                            <Button onClick={this.tick}>Check on Switch</Button>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Defuse the dead man's switch\">\r\n                            <Button onClick={this.defuse}>Defuse</Button>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Change the owner of the contract to 0x0. You will no longer be able to interact with the contract and will activate if not already defused\">\r\n                            <Button onClick={this.renounceOwnershipModal}>Renounce Ownership</Button>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Set the URL of the encrypted file\">\r\n                            <Button onClick={this.setUrl}>Set Url</Button>\r\n                        </Tooltip>\r\n                        <Input size=\"large\" id=\"setUrl\" />\r\n\r\n                        <Button onClick={this.getDecryptionKey}>Reveal Decryption Key</Button>\r\n                        {this.state.showDecryptionKeyText && <Paragraph>{this.state.decryptionKey}</Paragraph>}\r\n                    </Space>\r\n                )}\r\n\r\n                <Modal id=\"renounce\" title=\"Are you sure?\" visible={this.state.isModalRenounceVisible}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleRenounceCancel}>Cancel</Button>,\r\n                        <Button key=\"submit\" onClick={this.renounceOwnership}>Renounce Ownership</Button>\r\n                    ]}>\r\n                    <Paragraph>Renouncing the ownership of the Dead Man's Switch means that if not defused, there is no stopping the switch from activating.</Paragraph>\r\n                    <Paragraph>This action is is irreversible.</Paragraph>\r\n                </Modal>\r\n\r\n                <Modal id=\"defuse\" title=\"Are you sure?\" visible={this.state.isModalDefuseVisible}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.defuse} >Cancel</Button>,\r\n                        <Button key=\"submit\" onClick={this.handleDefuseCancel}>Defuse</Button>\r\n                    ]}>\r\n                    <Paragraph>Defusing the Dead Man's Switch means that the danger has passed and the use of the switch is no longer needed. The decryption key\r\n                        will not be revealed and you will no longer need to check on the switch.</Paragraph>\r\n                    <Paragraph>This action is is irreversible.</Paragraph>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default ContractInteraction;","import DeadMansContract from '../utils/DeadMansContract.abi.json';\r\nimport { ethers, ContractFactory } from \"ethers\";\r\nimport { useState } from 'react';\r\n\r\nimport { Collapse, Button, Input, Typography, Divider, Spin } from 'antd';\r\nimport \"antd/dist/antd.css\";\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport ContractInteraction from './contractInteraction';\r\n\r\nconst { Title, Paragraph, Text } = Typography;\r\nconst { Panel } = Collapse;\r\nconst antIcon = <LoadingOutlined style={{ fontSize: 92, width: 100 }} spin />;\r\n\r\nfunction ContractSetup() {\r\n    const [currentAccount, setCurrentAccount] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState();\r\n    const [contractExists, setContractExists] = useState();\r\n    const [contractAddress, setContractAddress] = useState();\r\n\r\n    const connectWallet = async() => {\r\n        try {\r\n            const { ethereum } = window;\r\n\r\n            if (!ethereum) {\r\n                alert(\"This app only works with MetaMask for now!\");\r\n                return;\r\n            }\r\n\r\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n            console.log(\"Connected\", accounts[0]);\r\n            setCurrentAccount(accounts[0]);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const createContract = async() => {\r\n        try {\r\n            const { ethereum } = window;\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum)\r\n                const signer = provider.getSigner();\r\n                const decryptionKey = document.getElementById(\"decryptionKey\").value;\r\n                const cadence = document.getElementById(\"cadence\").value;\r\n\r\n                const factory = new ContractFactory(DeadMansContract.abi, DeadMansContract.bytecode, signer);\r\n\r\n                const contract = await factory.deploy(decryptionKey, cadence);\r\n                console.log(\"Transaction sent\");\r\n                setIsLoading(true);\r\n\r\n                await contract.deployTransaction.wait().then(() => { // refactor to use async await\r\n                    console.log(contract.address);\r\n                    setIsLoading(false);\r\n                    setContractExists(true);\r\n                    setContractAddress(contract.address);\r\n                });\r\n\r\n            } else {\r\n                console.log(\"Ethereum object doesn't exist!\")\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    const getContract = () => {\r\n        // Error if not the correct address\r\n        const _contractAddress = document.getElementById(\"contractAddress\").value;\r\n        setContractAddress(_contractAddress);\r\n        setContractExists(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Title style={{fontSize:\"56px\"}}>Dead Man's Switch</Title>\r\n            {\r\n                !currentAccount ? (\r\n                    <Button size=\"large\" style={{marginBottom: \"24px\"}} onClick={connectWallet}>\r\n                        Connect Wallet\r\n                    </Button>\r\n                ) : <Title level={2}><Text underline>Currently connected as: {currentAccount}</Text></Title>\r\n            }\r\n\r\n            <Title level={2} style={{marginTop: \"2rem\", marginBottom: \"1.5rem\"}}>What is a Dead Man's Switch?</Title>\r\n            <Paragraph>\r\n                A Dead Man's Switch is a switch that is designed to be activated or deactivated if the human operator becomes incapcitated such as through death, loss of consciousness,\r\n                or being bodily removed from control. Originally applied to switches on a vehicle or machine, it has since come to be used to describe other intangible uses, as in computer software. &nbsp;\r\n                <a href=\"https://en.wikipedia.org/wiki/Dead_man%27s_switch\" target=\"_blank\">\r\n                    Source: Wikipedia (Dead Man's Switch)\r\n                </a>\r\n            </Paragraph>\r\n            <Paragraph style={{marginBottom: \"4rem\"}}>\r\n                This implementation of a Dead Man's Switch has two parts to it. The file/information that is being used as a contigency to ensure a person's safety and the smart contract which\r\n                lives on the blockchain that has the decrption key to that file.\r\n            </Paragraph>\r\n\r\n            {\r\n                isLoading ?\r\n                    <Spin indicator={antIcon} style={{ width: \"100%\", marginTop: \"4rem\" }} /> :\r\n                    (\r\n                        <div>\r\n                            {contractExists ? <ContractInteraction address={contractAddress} /> : (\r\n                                <div className=\"inputs\">\r\n                                    <Divider plain>Check on deployed Dead Man's Switch</Divider>\r\n                                    <div>\r\n                                        <Input size=\"large\" id=\"contractAddress\" placeholder=\"Address of contract\"></Input>\r\n                                        <Button style={{ marginTop: \"2rem\" }} onClick={getContract}>Get Contract</Button>\r\n                                    </div>\r\n\r\n                                    <Divider plain>Deploy a new Dead Man's Switch</Divider>\r\n                                    <div>\r\n                                        <Input size=\"large\" id=\"decryptionKey\" placeholder=\"Decryption Key\"></Input>\r\n                                        <Input style={{ marginTop: \"1.25rem\" }} size=\"large\" id=\"cadence\" placeholder=\"When to check in hours\" max=\"168\"></Input>\r\n                                        <Button style={{ marginTop: \"2rem\" }} onClick={createContract}>Create Dead Man's Switch</Button>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )\r\n            }\r\n\r\n            <div style={{ marginTop: \"6rem\" }}>\r\n                <Title level={5}>Frequently Asked Questions</Title>\r\n                <Collapse>\r\n                    <Panel header=\"How it works\">\r\n                        This should be used a contingency if your life or reputation is in danger.\r\n                        <Paragraph style={{marginTop: \".5rem\"}}>\r\n                            Prerequisites: <a href=\"https://www.youtube.com/watch?v=MfkqgXNPiHg\" target=\"_blank\">How to start using Metamask</a>\r\n                        </Paragraph>\r\n\r\n                        <ul style={{ marginTop: \"1rem\" }}>\r\n                            <li>Upload your encrypted files somewhere public and distribute it to as many people as possible. Uploading to IPFS *link to IPFS* would be preferable since it is a more permanent and decentralized way of storing files.</li>\r\n                            <li>Deploy the Dead Man's Switch contract with the decryption key and cadence of when the switch should be checked up on. The decryption key is not visible until the switch activates.</li>\r\n                            <li>The switch only activates if the you haven't checked in on it in time.</li>\r\n                            <li>Once activated, anyone will able to see the decryption phrase.</li>\r\n                            <li>Keep note of the address of the smart contract. You will need this in order to interact with the contract using this website, otherwise you can look at your transactions and find the contract again that way.</li>\r\n                        </ul>\r\n                    </Panel>\r\n                    <Panel header=\"Why is the Ethereuem Blockchain perfect for this?\"><p>\r\n                        Blockchains are (usually) open and immutable. Or in other words, transactions on a public blockchain are available for anyone to see and are permanent. On Ethereum, you can also\r\n                        store logic for transactions by interacting with Smart Contracts *href to smart contracts*. Smart Contracts are very similar to programs, only that they run on and use the Ethereum Blockchain for data.\r\n                        That means that you can store a limited amount of data in a Smart Contract.\r\n\r\n                        Once this smart contract is deployed, there is no stopping it unless the deployer of the contract loses control of their wallet, in which case it was already probably too late for them.\r\n                        If the switch activates, then *anyone* will be able to decrypt and view the information that the deployer wanted to use as contigency for their safety.\r\n                    </p></Panel>\r\n                    <Panel header=\"Does it cost anything?\"><p>Nope. Only gas for transactions.</p></Panel>\r\n                </Collapse>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContractSetup;\r\n","import React from 'react';\r\nimport { CopyBlock, dracula } from \"react-code-blocks\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\nclass ContractCode extends React.Component {\r\n    render() {\r\n        const code = `\r\n// SPDX-License-Identifier: MIT\r\n// Dead Mans Contract\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"hardhat/console.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract DeadMansContract is Ownable //Need to test functions in diff scenarios\r\n{\r\n    string private _decryptionKey;\r\n    string _url;\r\n    uint256 nextTimestamp;\r\n    uint256 private _hourCadence;\r\n\r\n    event heartbeat();\r\n\r\n    constructor(string memory decryptionKey, uint256 hourCadence) {\r\n        require(hourCadence < 168); // Owner has to check in atleast once a week\r\n        _decryptionKey = decryptionKey;\r\n        _hourCadence = hourCadence;\r\n        nextTimestamp = block.timestamp + convertHourToUnixEpoch(_hourCadence);\r\n    }\r\n\r\n    function isActive() public view onlyOwner returns (bool) {\r\n        if (block.timestamp <= nextTimestamp) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function tick() public onlyOwner {\r\n        require(block.timestamp <= nextTimestamp);\r\n        nextTimestamp += convertHourToUnixEpoch(_hourCadence);\r\n        emit heartbeat();\r\n    }\r\n\r\n    function getDecryptionKey() public view returns (string memory) { // Owner has failed to check on DMS, reveal key.\r\n        require(block.timestamp >= nextTimestamp, \"The switch has not been activated yet\");\r\n        return _decryptionKey;\r\n    }\r\n\r\n\r\n    function getNextTimeStamp() public view returns (uint256) {\r\n        return nextTimestamp;\r\n    }\r\n\r\n    function setUrl(string memory url) public onlyOwner {\r\n        _url = url;\r\n    }\r\n\r\n    function getUrl() public view returns (string memory) {\r\n        return _url;\r\n    }\r\n\r\n    function defuse() public onlyOwner {\r\n        _hourCadence = 0;\r\n        nextTimestamp = 0;\r\n        _decryptionKey = \"\";\r\n        renounceOwnership();\r\n    } // Turn off DMS\r\n\r\n    function _renounceOwnership() public onlyOwner {\r\n        renounceOwnership();\r\n    }\r\n\r\n    function convertHourToUnixEpoch(uint256 h) internal pure returns (uint256) {\r\n        return h * 3600;\r\n    }\r\n}\r\n`;\r\n        return (\r\n            <div>\r\n                <Title level={2}>Dead Man's Contract Source Code</Title>\r\n                <CopyBlock\r\n                    text={code}\r\n                    language=\"javascript\"\r\n                    showLineNumber=\"true\"\r\n                    theme={dracula}\r\n                >\r\n                </CopyBlock>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ContractCode;","import './App.css';\n\nimport { Layout, Menu, Row, Col } from 'antd';\nimport \"antd/dist/antd.css\";\n\nimport ContractSetup from './components/contractSetup';\nimport ContractCode from './components/smartContract';\n\nimport { BrowserRouter as Router, Link, Route, Switch, Redirect } from \"react-router-dom\";\n\nconst { Header, Content, Footer } = Layout;\nfunction App() {\n\n  return (\n    <Router>\n      <Layout>\n        <Header style={{ position: \"fixed\", zIndex: 1, width: \"100%\" }}>\n          <Menu theme=\"dark\" mode=\"horizontal\" >\n            {/* Logo? */}\n            <Menu.Item key=\"1\">\n              Home<Link to=\"/\" />\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              Smart Contract<Link to=\"code\" />\n            </Menu.Item>\n          </Menu>\n        </Header>\n        <Content style={{ marginTop: \"6rem\" }}>\n          <Row justify=\"center\">\n            <Col span={12}>\n              <Switch>\n                <Route exact path=\"/\" component={ContractSetup} />\n                <Route exact path=\"/code\" component={ContractCode} />\n                <Redirect to=\"/\" />\n              </Switch>\n            </Col>\n          </Row>\n        </Content>\n\n        <Footer  style={{marginTop: \"48px\" }}>Disclaimer: This is just a fun project that I wanted to do. Please don't use this for anything that is actually super duper serious. I am not responsible on how this is used</Footer>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}