{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samba\\\\Desktop\\\\ETH Projects\\\\dead-mans-switch\\\\dead-mans-switch-front-end\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport DeadMansContract from './utils/DeadMansContract.abi.json';\nimport { ethers, ContractFactory } from \"ethers\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"This app only works with MetaMask for now!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const createContract = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const decryptionKey = document.getElementById(\"decryptionKey\").value;\n        const cadence = document.getElementById(\"cadence\").value;\n        const factory = new ContractFactory(DeadMansContract.abi, DeadMansContract.bytecode, signer);\n        const contract = await factory.deploy(decryptionKey, cadence);\n        await contract.deployTransaction.wait(); // console.log(contract.address);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hO+PRUreH9DSyy9FjpWYmXii118=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/samba/Desktop/ETH Projects/dead-mans-switch/dead-mans-switch-front-end/src/App.js"],"names":["DeadMansContract","ethers","ContractFactory","useState","App","currentAccount","setCurrentAccount","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","createContract","provider","providers","Web3Provider","signer","getSigner","decryptionKey","document","getElementById","value","cadence","factory","abi","bytecode","contract","deploy","deployTransaction","wait"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,gBAAP,MAA6B,mCAA7B;AACA,SAASC,MAAT,EAAiBC,eAAjB,QAAwC,QAAxC;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCH,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMI,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbE,QAAAA,KAAK,CAAC,4CAAD,CAAL;AACA;AACD;;AAED,YAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBJ,QAAQ,CAAC,CAAD,CAAjC;AACAL,MAAAA,iBAAiB,CAACK,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KAXD,CAWE,OAAOK,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,GAfD;;AAiBA,QAAMC,cAAc,GAAG,YAAY;AACjC,QAAI;AACF,YAAM;AAAET,QAAAA;AAAF,UAAeC,MAArB;;AACA,UAAID,QAAJ,EAAc;AACZ,cAAMU,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCZ,QAAlC,CAAjB;AACA,cAAMa,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,aAAa,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,KAA/D;AACA,cAAMC,OAAO,GAAGH,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCC,KAAnD;AAEA,cAAME,OAAO,GAAG,IAAI1B,eAAJ,CAAoBF,gBAAgB,CAAC6B,GAArC,EAA0C7B,gBAAgB,CAAC8B,QAA3D,EAAqET,MAArE,CAAhB;AAEA,cAAMU,QAAQ,GAAG,MAAMH,OAAO,CAACI,MAAR,CAAeT,aAAf,EAA8BI,OAA9B,CAAvB;AAEA,cAAMI,QAAQ,CAACE,iBAAT,CAA2BC,IAA3B,EAAN,CAVY,CAYZ;AACD,OAbD,MAaO;AACLpB,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,GAtBD;;AAwBA,sBACE;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;;GA/CQZ,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport DeadMansContract from './utils/DeadMansContract.abi.json';\nimport { ethers, ContractFactory } from \"ethers\";\nimport { useState } from 'react';\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"This app only works with MetaMask for now!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const createContract = async () => {\n    try {\n      const { ethereum } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner();\n        const decryptionKey = document.getElementById(\"decryptionKey\").value;\n        const cadence = document.getElementById(\"cadence\").value;\n\n        const factory = new ContractFactory(DeadMansContract.abi, DeadMansContract.bytecode, signer);\n\n        const contract = await factory.deploy(decryptionKey, cadence);\n\n        await contract.deployTransaction.wait();\n\n        // console.log(contract.address);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <main></main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}