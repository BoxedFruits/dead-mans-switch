{"code":"(this[\"webpackJsonpdead-mans-switch-front-end\"]=this[\"webpackJsonpdead-mans-switch-front-end\"]||[]).push([[114],{475:function(e,n,a){\"use strict\";function t(e){e.languages.r={comment:/#.*/,string:{pattern:/(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},\"percent-operator\":{pattern:/%[^%\\s]*%/,alias:\"operator\"},boolean:/\\b(?:TRUE|FALSE)\\b/,ellipsis:/\\.\\.(?:\\.|\\d+)/,number:[/\\b(?:NaN|Inf)\\b/,/(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],keyword:/\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,operator:/->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,punctuation:/[(){}\\[\\],;]/}}e.exports=t,t.displayName=\"r\",t.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_r.918dcb5c.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_r.918dcb5c.chunk.js"],"names":["this","push","module","exports","__webpack_require__","r","Prism","languages","comment","string","pattern","greedy","alias","boolean","ellipsis","number","keyword","operator","punctuation","displayName","aliases"],"mappings":"CAACA,KAAK,0CAA4CA,KAAK,2CAA6C,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9G,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAEC,GACTA,EAAMC,UAAUF,EAAI,CAClBG,QAAS,MACTC,OAAQ,CACNC,QAAS,mCACTC,QAAQ,GAEV,mBAAoB,CAGlBD,QAAS,YACTE,MAAO,YAETC,QAAS,qBACTC,SAAU,iBACVC,OAAQ,CAAC,kBAAmB,6EAC5BC,QAAS,iHACTC,SAAU,qDACVC,YAAa,gBAtBjBhB,EAAOC,QAAUE,EACjBA,EAAEc,YAAc,IAChBd,EAAEe,QAAU"},"input":"(this[\"webpackJsonpdead-mans-switch-front-end\"] = this[\"webpackJsonpdead-mans-switch-front-end\"] || []).push([[114],{\n\n/***/ 475:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = r;\nr.displayName = 'r';\nr.aliases = [];\n\nfunction r(Prism) {\n  Prism.languages.r = {\n    comment: /#.*/,\n    string: {\n      pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'percent-operator': {\n      // Includes user-defined operators\n      // and %%, %*%, %/%, %in%, %o%, %x%\n      pattern: /%[^%\\s]*%/,\n      alias: 'operator'\n    },\n    boolean: /\\b(?:TRUE|FALSE)\\b/,\n    ellipsis: /\\.\\.(?:\\.|\\d+)/,\n    number: [/\\b(?:NaN|Inf)\\b/, /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/],\n    keyword: /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    punctuation: /[(){}\\[\\],;]/\n  };\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/samba/Desktop/ETH Projects/dead-mans-switch/dead-mans-switch-front-end/node_modules/refractor/lang/r.js"],"names":["module","exports","r","displayName","aliases","Prism","languages","comment","string","pattern","greedy","alias","boolean","ellipsis","number","keyword","operator","punctuation"],"mappings":";;;;;;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,CAAjB;AACAA,CAAC,CAACC,WAAF,GAAgB,GAAhB;AACAD,CAAC,CAACE,OAAF,GAAY,EAAZ;;AACA,SAASF,CAAT,CAAWG,KAAX,EAAkB;AAChBA,OAAK,CAACC,SAAN,CAAgBJ,CAAhB,GAAoB;AAClBK,WAAO,EAAE,KADS;AAElBC,UAAM,EAAE;AACNC,aAAO,EAAE,kCADH;AAENC,YAAM,EAAE;AAFF,KAFU;AAMlB,wBAAoB;AAClB;AACA;AACAD,aAAO,EAAE,WAHS;AAIlBE,WAAK,EAAE;AAJW,KANF;AAYlBC,WAAO,EAAE,oBAZS;AAalBC,YAAQ,EAAE,gBAbQ;AAclBC,UAAM,EAAE,CACN,iBADM,EAEN,2EAFM,CAdU;AAkBlBC,WAAO,EAAE,gHAlBS;AAmBlBC,YAAQ,EAAE,oDAnBQ;AAoBlBC,eAAW,EAAE;AApBK,GAApB;AAsBD,C","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = r\nr.displayName = 'r'\nr.aliases = []\nfunction r(Prism) {\n  Prism.languages.r = {\n    comment: /#.*/,\n    string: {\n      pattern: /(['\"])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    'percent-operator': {\n      // Includes user-defined operators\n      // and %%, %*%, %/%, %in%, %o%, %x%\n      pattern: /%[^%\\s]*%/,\n      alias: 'operator'\n    },\n    boolean: /\\b(?:TRUE|FALSE)\\b/,\n    ellipsis: /\\.\\.(?:\\.|\\d+)/,\n    number: [\n      /\\b(?:NaN|Inf)\\b/,\n      /(?:\\b0x[\\dA-Fa-f]+(?:\\.\\d*)?|\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[EePp][+-]?\\d+)?[iL]?/\n    ],\n    keyword: /\\b(?:if|else|repeat|while|function|for|in|next|break|NULL|NA|NA_integer_|NA_real_|NA_complex_|NA_character_)\\b/,\n    operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\\|\\|?|[+*\\/^$@~]/,\n    punctuation: /[(){}\\[\\],;]/\n  }\n}\n"]}}