{"code":"(this[\"webpackJsonpdead-mans-switch-front-end\"]=this[\"webpackJsonpdead-mans-switch-front-end\"]||[]).push([[43],{410:function(e,a,n){\"use strict\";function s(e){e.languages.gedcom={\"line-value\":{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,lookbehind:!0,inside:{pointer:{pattern:/^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,alias:\"variable\"}}},tag:{pattern:/(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,lookbehind:!0,alias:\"string\"},level:{pattern:/(^\\s*)\\d+/m,lookbehind:!0,alias:\"number\"},pointer:{pattern:/@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,alias:\"variable\"}}}e.exports=s,s.displayName=\"gedcom\",s.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_gedcom.c890c596.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_gedcom.c890c596.chunk.js"],"names":["this","push","module","exports","__webpack_require__","gedcom","Prism","languages","pattern","lookbehind","inside","pointer","alias","tag","level","displayName","aliases"],"mappings":"CAACA,KAAK,0CAA4CA,KAAK,2CAA6C,IAAIC,KAAK,CAAC,CAAC,IAAI,CAE7G,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CACvB,aAAc,CAEZG,QAAS,iFACTC,YAAY,EACZC,OAAQ,CACNC,QAAS,CACPH,QAAS,yDACTI,MAAO,cAIbC,IAAK,CAEHL,QAAS,6EACTC,YAAY,EACZG,MAAO,UAETE,MAAO,CACLN,QAAS,aACTC,YAAY,EACZG,MAAO,UAETD,QAAS,CACPH,QAAS,uDACTI,MAAO,aA9BbV,EAAOC,QAAUE,EACjBA,EAAOU,YAAc,SACrBV,EAAOW,QAAU"},"input":"(this[\"webpackJsonpdead-mans-switch-front-end\"] = this[\"webpackJsonpdead-mans-switch-front-end\"] || []).push([[43],{\n\n/***/ 410:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = gedcom;\ngedcom.displayName = 'gedcom';\ngedcom.aliases = [];\n\nfunction gedcom(Prism) {\n  Prism.languages.gedcom = {\n    'line-value': {\n      // Preceded by level, optional pointer, and tag\n      pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,\n      lookbehind: true,\n      inside: {\n        pointer: {\n          pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n          alias: 'variable'\n        }\n      }\n    },\n    tag: {\n      // Preceded by level and optional pointer\n      pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n      lookbehind: true,\n      alias: 'string'\n    },\n    level: {\n      pattern: /(^\\s*)\\d+/m,\n      lookbehind: true,\n      alias: 'number'\n    },\n    pointer: {\n      pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n      alias: 'variable'\n    }\n  };\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/samba/Desktop/ETH Projects/dead-mans-switch/dead-mans-switch-front-end/node_modules/refractor/lang/gedcom.js"],"names":["module","exports","gedcom","displayName","aliases","Prism","languages","pattern","lookbehind","inside","pointer","alias","tag","level"],"mappings":";;;;;;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,OAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvB,kBAAc;AACZ;AACAK,aAAO,EAAE,gFAFG;AAGZC,gBAAU,EAAE,IAHA;AAIZC,YAAM,EAAE;AACNC,eAAO,EAAE;AACPH,iBAAO,EAAE,wDADF;AAEPI,eAAK,EAAE;AAFA;AADH;AAJI,KADS;AAYvBC,OAAG,EAAE;AACH;AACAL,aAAO,EAAE,4EAFN;AAGHC,gBAAU,EAAE,IAHT;AAIHG,WAAK,EAAE;AAJJ,KAZkB;AAkBvBE,SAAK,EAAE;AACLN,aAAO,EAAE,YADJ;AAELC,gBAAU,EAAE,IAFP;AAGLG,WAAK,EAAE;AAHF,KAlBgB;AAuBvBD,WAAO,EAAE;AACPH,aAAO,EAAE,sDADF;AAEPI,WAAK,EAAE;AAFA;AAvBc,GAAzB;AA4BD,C","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = gedcom\ngedcom.displayName = 'gedcom'\ngedcom.aliases = []\nfunction gedcom(Prism) {\n  Prism.languages.gedcom = {\n    'line-value': {\n      // Preceded by level, optional pointer, and tag\n      pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?\\w+ +).+/m,\n      lookbehind: true,\n      inside: {\n        pointer: {\n          pattern: /^@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@$/,\n          alias: 'variable'\n        }\n      }\n    },\n    tag: {\n      // Preceded by level and optional pointer\n      pattern: /(^\\s*\\d+ +(?:@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@ +)?)\\w+/m,\n      lookbehind: true,\n      alias: 'string'\n    },\n    level: {\n      pattern: /(^\\s*)\\d+/m,\n      lookbehind: true,\n      alias: 'number'\n    },\n    pointer: {\n      pattern: /@\\w[\\w!\"$%&'()*+,\\-./:;<=>?[\\\\\\]^`{|}~\\x80-\\xfe #]*@/,\n      alias: 'variable'\n    }\n  }\n}\n"]}}