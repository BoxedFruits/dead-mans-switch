{"code":"(this[\"webpackJsonpdead-mans-switch-front-end\"]=this[\"webpackJsonpdead-mans-switch-front-end\"]||[]).push([[105],{466:function(n,t,s){\"use strict\";function o(n){n.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+\\.?\\d*/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/}}n.exports=o,o.displayName=\"prolog\",o.aliases=[]}}]);","name":"static/js/react-syntax-highlighter_languages_refractor_prolog.f9eb07ee.chunk.js","map":{"version":3,"sources":["static/js/react-syntax-highlighter_languages_refractor_prolog.f9eb07ee.chunk.js"],"names":["this","push","module","exports","__webpack_require__","prolog","Prism","languages","comment","string","pattern","greedy","builtin","variable","function","number","operator","punctuation","displayName","aliases"],"mappings":"CAACA,KAAK,0CAA4CA,KAAK,2CAA6C,IAAIC,KAAK,CAAC,CAAC,KAAK,CAE9G,IACA,SAAUC,EAAQC,EAASC,GAEjC,aAOA,SAASC,EAAOC,GACdA,EAAMC,UAAUF,OAAS,CAEvBG,QAAS,CAAC,MAAO,oBAEjBC,OAAQ,CACNC,QAAS,sDACTC,QAAQ,GAEVC,QAAS,6BACTC,SAAU,cAEVC,SAAU,6BACVC,OAAQ,cAERC,SAAU,iDACVC,YAAa,eApBjBf,EAAOC,QAAUE,EACjBA,EAAOa,YAAc,SACrBb,EAAOc,QAAU"},"input":"(this[\"webpackJsonpdead-mans-switch-front-end\"] = this[\"webpackJsonpdead-mans-switch-front-end\"] || []).push([[105],{\n\n/***/ 466:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = prolog;\nprolog.displayName = 'prolog';\nprolog.aliases = [];\n\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    variable: /\\b[A-Z_]\\w*/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+\\.?\\d*/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  };\n}\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["C:/Users/samba/Desktop/ETH Projects/dead-mans-switch/dead-mans-switch-front-end/node_modules/refractor/lang/prolog.js"],"names":["module","exports","prolog","displayName","aliases","Prism","languages","comment","string","pattern","greedy","builtin","variable","function","number","operator","punctuation"],"mappings":";;;;;;AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,OAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvB;AACAK,WAAO,EAAE,CAAC,KAAD,EAAQ,kBAAR,CAFc;AAGvB;AACAC,UAAM,EAAE;AACNC,aAAO,EAAE,qDADH;AAENC,YAAM,EAAE;AAFF,KAJe;AAQvBC,WAAO,EAAE,4BARc;AASvBC,YAAQ,EAAE,aATa;AAUvB;AACAC,YAAQ,EAAE,4BAXa;AAYvBC,UAAM,EAAE,aAZe;AAavB;AACAC,YAAQ,EAAE,gDAda;AAevBC,eAAW,EAAE;AAfU,GAAzB;AAiBD,C","file":"x","sourcesContent":["'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    variable: /\\b[A-Z_]\\w*/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+\\.?\\d*/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n"]}}